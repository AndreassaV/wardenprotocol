syntax = "proto3";

package warden.act.v1beta1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "warden/act/v1beta1/params.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/act/types/v1beta1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // NewAction creates a new Action.
  rpc NewAction (MsgNewAction) returns (MsgNewActionResponse);
  
  // Add an approval to an existing Action.
  rpc ApproveAction (MsgApproveAction) returns (MsgApproveActionResponse);
  
  // Create a new Rule.
  rpc NewRule (MsgNewRule) returns (MsgNewRuleResponse);

  // Update an existing act name and definition.
  rpc UpdateRule (MsgUpdateRule) returns (MsgUpdateRuleResponse);
  
  // Revoke an existing Action while in pending state.
  rpc RevokeAction (MsgRevokeAction) returns (MsgRevokeActionResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                       "authority";
  option           (amino.name) = "warden/x/act/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgNewAction {
  option (cosmos.msg.v1.signer) = "creator";
  // creator is the address of the requester of this action.
  string creator = 1;
  // message is the arbitrary message to be executed when the action is ready.
  google.protobuf.Any message = 2;
  // action_timeout_height is the block height up until this action can be executed.
  uint64 action_timeout_height = 3;
}

message MsgNewActionResponse {
  // id is the unique id of the action.
  uint64 id = 1;
}

message MsgApproveAction {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  uint64 action_id   = 2;
}

message MsgApproveActionResponse {
  string status = 1;
}

message MsgNewRule {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string name        = 2;
  string definition  = 3;
}

message MsgNewRuleResponse {
  uint64 id = 1;
}

message MsgUpdateRule {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  uint64 id          = 2;
  string name        = 3;
  string definition  = 4;
}

message MsgUpdateRuleResponse {}

message MsgRevokeAction {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  uint64 action_id   = 2;
}

message MsgRevokeActionResponse {}
