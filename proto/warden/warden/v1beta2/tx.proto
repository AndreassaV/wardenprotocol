syntax = "proto3";
package warden.warden.v1beta2;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "warden/warden/v1beta2/key.proto";
import "warden/warden/v1beta2/keychain.proto";
import "warden/warden/v1beta2/params.proto";
import "warden/warden/v1beta2/signature.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta2";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Create a new Space. The creator will be the first owner of the Space.
  rpc NewSpace(MsgNewSpace) returns (MsgNewSpaceResponse);

  // Add a new owner to a Space.
  rpc AddSpaceOwner(MsgAddSpaceOwner) returns (MsgAddSpaceOwnerResponse);

  // Remove an owner from the Space. 
  rpc RemoveSpaceOwner(MsgRemoveSpaceOwner)
      returns (MsgRemoveSpaceOwnerResponse);

  // Create a new Keychain. The user will be the first admin of the Keychain.
  rpc NewKeychain(MsgNewKeychain) returns (MsgNewKeychainResponse);

  // Add a new writer to a Keychain.
  rpc AddKeychainWriter(MsgAddKeychainWriter)
      returns (MsgAddKeychainWriterResponse);

  // Update a Space.
  rpc UpdateSpace(MsgUpdateSpace) returns (MsgUpdateSpaceResponse);

  // Update a Keychain.
  rpc UpdateKeychain(MsgUpdateKeychain) returns (MsgUpdateKeychainResponse);

  // Create a new KeyRequest.
  rpc NewKeyRequest(MsgNewKeyRequest) returns (MsgNewKeyRequestResponse);

  // Fulfil or reject a KeyRequest.
  rpc UpdateKeyRequest(MsgUpdateKeyRequest)
      returns (MsgUpdateKeyRequestResponse);

  // Update a Key.
  rpc UpdateKey(MsgUpdateKey)
      returns (MsgUpdateKeyResponse);

  // Create a new SignatureRequest.
  rpc NewSignatureRequest(MsgNewSignatureRequest)
      returns (MsgNewSignatureRequestResponse);

  // Fulfil or reject a SignatureRequest.
  rpc FulfilSignatureRequest(MsgFulfilSignatureRequest)
      returns (MsgFulfilSignatureRequestResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "warden/x/warden/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgNewSpace {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 admin_rule_id = 2;
  uint64 sign_rule_id = 3;
  repeated string additional_owners = 4;
}

message MsgNewSpaceResponse { uint64 id = 1; }

message MsgAddSpaceOwner {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  string new_owner = 3;
}

message MsgAddSpaceOwnerResponse {}

message MsgRemoveSpaceOwner {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  string owner = 3;
}

message MsgRemoveSpaceOwnerResponse {}

message MsgNewKeychain {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string description = 2;
  reserved 3;
  KeychainFees keychain_fees = 4;
}

message MsgNewKeychainResponse { uint64 id = 1; }

message MsgAddKeychainWriter {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 keychain_id = 2;
  string writer = 3;
}

message MsgAddKeychainWriterResponse {}

message MsgUpdateSpace {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  uint64 admin_rule_id = 3;
  uint64 sign_rule_id = 4;
}

message MsgUpdateSpaceResponse {}

message MsgUpdateKeychain {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 keychain_id = 2;
  string description = 3;
  reserved 4;
  KeychainFees keychain_fees = 5;
}

message MsgUpdateKeychainResponse {}

message MsgNewKeyRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  uint64 keychain_id = 3;
  KeyType key_type = 4;
  uint64 rule_id = 5;
}

message MsgNewKeyRequestResponse { uint64 id = 1; }

message MsgNewKey { bytes public_key = 1; }

message MsgUpdateKeyRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 request_id = 2;
  KeyRequestStatus status = 3;

  oneof result {
    MsgNewKey key = 4;
    string reject_reason = 5;
  }
}

message MsgUpdateKeyRequestResponse {}

message MsgUpdateKey {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 key_id = 2;
  uint64 rule_id = 3;
}

message MsgUpdateKeyResponse {}

message MsgNewSignatureRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 key_id = 2;
  bytes input = 3;
  SignMethod sign_method = 4;
  google.protobuf.Any metadata = 5;
  repeated string analyzers = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes encryption_key = 8;
}

message MetadataEthereum { uint64 chain_id = 1; }

message MsgNewSignatureRequestResponse { uint64 id = 1; }

message MsgSignedData { bytes signed_data = 1; }

message MsgFulfilSignatureRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 request_id = 2;
  SignRequestStatus status = 3;

  // Holds the result of the request. If status is approved, the result will
  // contain the signed data that was requested
  // If status is rejected, the result will contain the reason.
  oneof result {
    MsgSignedData payload = 4;
    string reject_reason = 5;
  }
}

message MsgFulfilSignatureRequestResponse {}
