// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package wardenv1beta2

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_KeyRequest               protoreflect.MessageDescriptor
	fd_KeyRequest_id            protoreflect.FieldDescriptor
	fd_KeyRequest_creator       protoreflect.FieldDescriptor
	fd_KeyRequest_space_id      protoreflect.FieldDescriptor
	fd_KeyRequest_keychain_id   protoreflect.FieldDescriptor
	fd_KeyRequest_key_type      protoreflect.FieldDescriptor
	fd_KeyRequest_status        protoreflect.FieldDescriptor
	fd_KeyRequest_reject_reason protoreflect.FieldDescriptor
	fd_KeyRequest_rule_id       protoreflect.FieldDescriptor
)

func init() {
	file_warden_warden_v1beta2_key_proto_init()
	md_KeyRequest = File_warden_warden_v1beta2_key_proto.Messages().ByName("KeyRequest")
	fd_KeyRequest_id = md_KeyRequest.Fields().ByName("id")
	fd_KeyRequest_creator = md_KeyRequest.Fields().ByName("creator")
	fd_KeyRequest_space_id = md_KeyRequest.Fields().ByName("space_id")
	fd_KeyRequest_keychain_id = md_KeyRequest.Fields().ByName("keychain_id")
	fd_KeyRequest_key_type = md_KeyRequest.Fields().ByName("key_type")
	fd_KeyRequest_status = md_KeyRequest.Fields().ByName("status")
	fd_KeyRequest_reject_reason = md_KeyRequest.Fields().ByName("reject_reason")
	fd_KeyRequest_rule_id = md_KeyRequest.Fields().ByName("rule_id")
}

var _ protoreflect.Message = (*fastReflection_KeyRequest)(nil)

type fastReflection_KeyRequest KeyRequest

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_KeyRequest)(x)
}

func (x *KeyRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_warden_warden_v1beta2_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_KeyRequest_messageType fastReflection_KeyRequest_messageType
var _ protoreflect.MessageType = fastReflection_KeyRequest_messageType{}

type fastReflection_KeyRequest_messageType struct{}

func (x fastReflection_KeyRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_KeyRequest)(nil)
}
func (x fastReflection_KeyRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_KeyRequest)
}
func (x fastReflection_KeyRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_KeyRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_KeyRequest) Type() protoreflect.MessageType {
	return _fastReflection_KeyRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_KeyRequest) New() protoreflect.Message {
	return new(fastReflection_KeyRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_KeyRequest) Interface() protoreflect.ProtoMessage {
	return (*KeyRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_KeyRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_KeyRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_KeyRequest_creator, value) {
			return
		}
	}
	if x.SpaceId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SpaceId)
		if !f(fd_KeyRequest_space_id, value) {
			return
		}
	}
	if x.KeychainId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeychainId)
		if !f(fd_KeyRequest_keychain_id, value) {
			return
		}
	}
	if x.KeyType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.KeyType))
		if !f(fd_KeyRequest_key_type, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_KeyRequest_status, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_KeyRequest_reject_reason, value) {
			return
		}
	}
	if x.RuleId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RuleId)
		if !f(fd_KeyRequest_rule_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_KeyRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		return x.Id != uint64(0)
	case "warden.warden.v1beta2.KeyRequest.creator":
		return x.Creator != ""
	case "warden.warden.v1beta2.KeyRequest.space_id":
		return x.SpaceId != uint64(0)
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		return x.KeychainId != uint64(0)
	case "warden.warden.v1beta2.KeyRequest.key_type":
		return x.KeyType != 0
	case "warden.warden.v1beta2.KeyRequest.status":
		return x.Status != 0
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		return x.RejectReason != ""
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		return x.RuleId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		x.Id = uint64(0)
	case "warden.warden.v1beta2.KeyRequest.creator":
		x.Creator = ""
	case "warden.warden.v1beta2.KeyRequest.space_id":
		x.SpaceId = uint64(0)
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		x.KeychainId = uint64(0)
	case "warden.warden.v1beta2.KeyRequest.key_type":
		x.KeyType = 0
	case "warden.warden.v1beta2.KeyRequest.status":
		x.Status = 0
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		x.RejectReason = ""
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		x.RuleId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_KeyRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.KeyRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "warden.warden.v1beta2.KeyRequest.space_id":
		value := x.SpaceId
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		value := x.KeychainId
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.KeyRequest.key_type":
		value := x.KeyType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "warden.warden.v1beta2.KeyRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		value := x.RuleId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		x.Id = value.Uint()
	case "warden.warden.v1beta2.KeyRequest.creator":
		x.Creator = value.Interface().(string)
	case "warden.warden.v1beta2.KeyRequest.space_id":
		x.SpaceId = value.Uint()
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		x.KeychainId = value.Uint()
	case "warden.warden.v1beta2.KeyRequest.key_type":
		x.KeyType = (KeyType)(value.Enum())
	case "warden.warden.v1beta2.KeyRequest.status":
		x.Status = (KeyRequestStatus)(value.Enum())
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		x.RejectReason = value.Interface().(string)
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		x.RuleId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		panic(fmt.Errorf("field id of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.creator":
		panic(fmt.Errorf("field creator of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.space_id":
		panic(fmt.Errorf("field space_id of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		panic(fmt.Errorf("field keychain_id of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.key_type":
		panic(fmt.Errorf("field key_type of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.status":
		panic(fmt.Errorf("field status of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		panic(fmt.Errorf("field reject_reason of message warden.warden.v1beta2.KeyRequest is not mutable"))
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		panic(fmt.Errorf("field rule_id of message warden.warden.v1beta2.KeyRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_KeyRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta2.KeyRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.KeyRequest.creator":
		return protoreflect.ValueOfString("")
	case "warden.warden.v1beta2.KeyRequest.space_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.KeyRequest.keychain_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.KeyRequest.key_type":
		return protoreflect.ValueOfEnum(0)
	case "warden.warden.v1beta2.KeyRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "warden.warden.v1beta2.KeyRequest.reject_reason":
		return protoreflect.ValueOfString("")
	case "warden.warden.v1beta2.KeyRequest.rule_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.KeyRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_KeyRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in warden.warden.v1beta2.KeyRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_KeyRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_KeyRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_KeyRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SpaceId != 0 {
			n += 1 + runtime.Sov(uint64(x.SpaceId))
		}
		if x.KeychainId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeychainId))
		}
		if x.KeyType != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyType))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RuleId != 0 {
			n += 1 + runtime.Sov(uint64(x.RuleId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RuleId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RuleId))
			i--
			dAtA[i] = 0x40
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if x.KeyType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyType))
			i--
			dAtA[i] = 0x28
		}
		if x.KeychainId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeychainId))
			i--
			dAtA[i] = 0x20
		}
		if x.SpaceId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SpaceId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
				}
				x.SpaceId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SpaceId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeychainId", wireType)
				}
				x.KeychainId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeychainId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				x.KeyType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyType |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= KeyRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
				}
				x.RuleId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RuleId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Key             protoreflect.MessageDescriptor
	fd_Key_id          protoreflect.FieldDescriptor
	fd_Key_space_id    protoreflect.FieldDescriptor
	fd_Key_keychain_id protoreflect.FieldDescriptor
	fd_Key_type        protoreflect.FieldDescriptor
	fd_Key_public_key  protoreflect.FieldDescriptor
	fd_Key_rule_id     protoreflect.FieldDescriptor
)

func init() {
	file_warden_warden_v1beta2_key_proto_init()
	md_Key = File_warden_warden_v1beta2_key_proto.Messages().ByName("Key")
	fd_Key_id = md_Key.Fields().ByName("id")
	fd_Key_space_id = md_Key.Fields().ByName("space_id")
	fd_Key_keychain_id = md_Key.Fields().ByName("keychain_id")
	fd_Key_type = md_Key.Fields().ByName("type")
	fd_Key_public_key = md_Key.Fields().ByName("public_key")
	fd_Key_rule_id = md_Key.Fields().ByName("rule_id")
}

var _ protoreflect.Message = (*fastReflection_Key)(nil)

type fastReflection_Key Key

func (x *Key) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Key)(x)
}

func (x *Key) slowProtoReflect() protoreflect.Message {
	mi := &file_warden_warden_v1beta2_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Key_messageType fastReflection_Key_messageType
var _ protoreflect.MessageType = fastReflection_Key_messageType{}

type fastReflection_Key_messageType struct{}

func (x fastReflection_Key_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Key)(nil)
}
func (x fastReflection_Key_messageType) New() protoreflect.Message {
	return new(fastReflection_Key)
}
func (x fastReflection_Key_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Key
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Key) Descriptor() protoreflect.MessageDescriptor {
	return md_Key
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Key) Type() protoreflect.MessageType {
	return _fastReflection_Key_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Key) New() protoreflect.Message {
	return new(fastReflection_Key)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Key) Interface() protoreflect.ProtoMessage {
	return (*Key)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Key) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Key_id, value) {
			return
		}
	}
	if x.SpaceId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SpaceId)
		if !f(fd_Key_space_id, value) {
			return
		}
	}
	if x.KeychainId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeychainId)
		if !f(fd_Key_keychain_id, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Key_type, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_Key_public_key, value) {
			return
		}
	}
	if x.RuleId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RuleId)
		if !f(fd_Key_rule_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Key) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "warden.warden.v1beta2.Key.id":
		return x.Id != uint64(0)
	case "warden.warden.v1beta2.Key.space_id":
		return x.SpaceId != uint64(0)
	case "warden.warden.v1beta2.Key.keychain_id":
		return x.KeychainId != uint64(0)
	case "warden.warden.v1beta2.Key.type":
		return x.Type_ != 0
	case "warden.warden.v1beta2.Key.public_key":
		return len(x.PublicKey) != 0
	case "warden.warden.v1beta2.Key.rule_id":
		return x.RuleId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "warden.warden.v1beta2.Key.id":
		x.Id = uint64(0)
	case "warden.warden.v1beta2.Key.space_id":
		x.SpaceId = uint64(0)
	case "warden.warden.v1beta2.Key.keychain_id":
		x.KeychainId = uint64(0)
	case "warden.warden.v1beta2.Key.type":
		x.Type_ = 0
	case "warden.warden.v1beta2.Key.public_key":
		x.PublicKey = nil
	case "warden.warden.v1beta2.Key.rule_id":
		x.RuleId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Key) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "warden.warden.v1beta2.Key.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.Key.space_id":
		value := x.SpaceId
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.Key.keychain_id":
		value := x.KeychainId
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta2.Key.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "warden.warden.v1beta2.Key.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	case "warden.warden.v1beta2.Key.rule_id":
		value := x.RuleId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "warden.warden.v1beta2.Key.id":
		x.Id = value.Uint()
	case "warden.warden.v1beta2.Key.space_id":
		x.SpaceId = value.Uint()
	case "warden.warden.v1beta2.Key.keychain_id":
		x.KeychainId = value.Uint()
	case "warden.warden.v1beta2.Key.type":
		x.Type_ = (KeyType)(value.Enum())
	case "warden.warden.v1beta2.Key.public_key":
		x.PublicKey = value.Bytes()
	case "warden.warden.v1beta2.Key.rule_id":
		x.RuleId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta2.Key.id":
		panic(fmt.Errorf("field id of message warden.warden.v1beta2.Key is not mutable"))
	case "warden.warden.v1beta2.Key.space_id":
		panic(fmt.Errorf("field space_id of message warden.warden.v1beta2.Key is not mutable"))
	case "warden.warden.v1beta2.Key.keychain_id":
		panic(fmt.Errorf("field keychain_id of message warden.warden.v1beta2.Key is not mutable"))
	case "warden.warden.v1beta2.Key.type":
		panic(fmt.Errorf("field type of message warden.warden.v1beta2.Key is not mutable"))
	case "warden.warden.v1beta2.Key.public_key":
		panic(fmt.Errorf("field public_key of message warden.warden.v1beta2.Key is not mutable"))
	case "warden.warden.v1beta2.Key.rule_id":
		panic(fmt.Errorf("field rule_id of message warden.warden.v1beta2.Key is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Key) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta2.Key.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.Key.space_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.Key.keychain_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta2.Key.type":
		return protoreflect.ValueOfEnum(0)
	case "warden.warden.v1beta2.Key.public_key":
		return protoreflect.ValueOfBytes(nil)
	case "warden.warden.v1beta2.Key.rule_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta2.Key"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta2.Key does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Key) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in warden.warden.v1beta2.Key", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Key) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Key) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Key) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.SpaceId != 0 {
			n += 1 + runtime.Sov(uint64(x.SpaceId))
		}
		if x.KeychainId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeychainId))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RuleId != 0 {
			n += 1 + runtime.Sov(uint64(x.RuleId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RuleId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RuleId))
			i--
			dAtA[i] = 0x30
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x20
		}
		if x.KeychainId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeychainId))
			i--
			dAtA[i] = 0x18
		}
		if x.SpaceId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SpaceId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Key: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
				}
				x.SpaceId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SpaceId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeychainId", wireType)
				}
				x.KeychainId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeychainId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
				}
				x.RuleId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RuleId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: warden/warden/v1beta2/key.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyRequestStatus indicates the status of a key request.
//
// The possible state transitions are:
//   - PENDING -> FULFILLED
//   - PENDING -> REJECTED
type KeyRequestStatus int32

const (
	// The request is missing the status field.
	KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED KeyRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	KeyRequestStatus_KEY_REQUEST_STATUS_PENDING KeyRequestStatus = 1
	// The request was fulfilled. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_FULFILLED KeyRequestStatus = 2
	// The request was rejected. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_REJECTED KeyRequestStatus = 3
)

// Enum value maps for KeyRequestStatus.
var (
	KeyRequestStatus_name = map[int32]string{
		0: "KEY_REQUEST_STATUS_UNSPECIFIED",
		1: "KEY_REQUEST_STATUS_PENDING",
		2: "KEY_REQUEST_STATUS_FULFILLED",
		3: "KEY_REQUEST_STATUS_REJECTED",
	}
	KeyRequestStatus_value = map[string]int32{
		"KEY_REQUEST_STATUS_UNSPECIFIED": 0,
		"KEY_REQUEST_STATUS_PENDING":     1,
		"KEY_REQUEST_STATUS_FULFILLED":   2,
		"KEY_REQUEST_STATUS_REJECTED":    3,
	}
)

func (x KeyRequestStatus) Enum() *KeyRequestStatus {
	p := new(KeyRequestStatus)
	*p = x
	return p
}

func (x KeyRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_warden_warden_v1beta2_key_proto_enumTypes[0].Descriptor()
}

func (KeyRequestStatus) Type() protoreflect.EnumType {
	return &file_warden_warden_v1beta2_key_proto_enumTypes[0]
}

func (x KeyRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyRequestStatus.Descriptor instead.
func (KeyRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_warden_warden_v1beta2_key_proto_rawDescGZIP(), []int{0}
}

// Scheme is signing crypto scheme of a Key.
type KeyType int32

const (
	// The key type is missing.
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	// The key is an ECDSA secp256k1 key.
	KeyType_KEY_TYPE_ECDSA_SECP256K1 KeyType = 1
	// The key is an EdDSA Ed25519 key.
	KeyType_KEY_TYPE_EDDSA_ED25519 KeyType = 2
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_ECDSA_SECP256K1",
		2: "KEY_TYPE_EDDSA_ED25519",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED":     0,
		"KEY_TYPE_ECDSA_SECP256K1": 1,
		"KEY_TYPE_EDDSA_ED25519":   2,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_warden_warden_v1beta2_key_proto_enumTypes[1].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_warden_warden_v1beta2_key_proto_enumTypes[1]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_warden_warden_v1beta2_key_proto_rawDescGZIP(), []int{1}
}

type AddressType int32

const (
	// The address type is missing.
	AddressType_ADDRESS_TYPE_UNSPECIFIED AddressType = 0
	// Ethereum address type (e.g. 0x71C7656EC7ab88b098defB751B7401B5f6d8976F).
	AddressType_ADDRESS_TYPE_ETHEREUM AddressType = 1
	// Osmosis address type (e.g. osmo10kmgv5gzygnecf46x092ecfe5xcvvv9rlt823n).
	AddressType_ADDRESS_TYPE_OSMOSIS AddressType = 2
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0: "ADDRESS_TYPE_UNSPECIFIED",
		1: "ADDRESS_TYPE_ETHEREUM",
		2: "ADDRESS_TYPE_OSMOSIS",
	}
	AddressType_value = map[string]int32{
		"ADDRESS_TYPE_UNSPECIFIED": 0,
		"ADDRESS_TYPE_ETHEREUM":    1,
		"ADDRESS_TYPE_OSMOSIS":     2,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_warden_warden_v1beta2_key_proto_enumTypes[2].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_warden_warden_v1beta2_key_proto_enumTypes[2]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_warden_warden_v1beta2_key_proto_rawDescGZIP(), []int{2}
}

// KeyRequest is the request from a user (creator) to a Keychain to create a
// new Key that will belong to a Space.
//
// The request can be:
//   - fulfilled by the Keychain, in which case a Key will be created;
//   - rejected, in which case the request reject_reason field will be set.
type KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for the request.
	// If the request is fulfilled, the new Key will be created with this id.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the creator of the request.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Space ID of the Space that the Key will belong to.
	SpaceId uint64 `protobuf:"varint,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// Keychain ID of the Keychain that will create the Key.
	KeychainId uint64 `protobuf:"varint,4,opt,name=keychain_id,json=keychainId,proto3" json:"keychain_id,omitempty"`
	// Crypto scheme of the Key.
	KeyType KeyType `protobuf:"varint,5,opt,name=key_type,json=keyType,proto3,enum=warden.warden.v1beta2.KeyType" json:"key_type,omitempty"`
	// Status of the request.
	Status KeyRequestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=warden.warden.v1beta2.KeyRequestStatus" json:"status,omitempty"`
	// If the request is rejected, this field will contain the reason.
	RejectReason string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	// ID of the Rule that the resulting Key will use.
	RuleId uint64 `protobuf:"varint,8,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warden_warden_v1beta2_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_warden_warden_v1beta2_key_proto_rawDescGZIP(), []int{0}
}

func (x *KeyRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *KeyRequest) GetSpaceId() uint64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *KeyRequest) GetKeychainId() uint64 {
	if x != nil {
		return x.KeychainId
	}
	return 0
}

func (x *KeyRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *KeyRequest) GetStatus() KeyRequestStatus {
	if x != nil {
		return x.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

func (x *KeyRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *KeyRequest) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

// Key is a public key that can be used to sign data.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the space that the key belongs to.
	SpaceId uint64 `protobuf:"varint,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// ID of the keychain that created the key.
	KeychainId uint64 `protobuf:"varint,3,opt,name=keychain_id,json=keychainId,proto3" json:"keychain_id,omitempty"`
	// Scheme of the key.
	Type_ KeyType `protobuf:"varint,4,opt,name=type,proto3,enum=warden.warden.v1beta2.KeyType" json:"type,omitempty"`
	// Public key of the key. The private key is only known to the Keychain that
	// generated it.
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// ID of the Rule that will need to be satisfied for using this key to sign
	// data.
	// If this is not set, the key will use the signing Rule of the Space.
	RuleId uint64 `protobuf:"varint,6,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warden_warden_v1beta2_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_warden_warden_v1beta2_key_proto_rawDescGZIP(), []int{1}
}

func (x *Key) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Key) GetSpaceId() uint64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *Key) GetKeychainId() uint64 {
	if x != nil {
		return x.KeychainId
	}
	return 0
}

func (x *Key) GetType_() KeyType {
	if x != nil {
		return x.Type_
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *Key) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Key) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

var File_warden_warden_v1beta2_key_proto protoreflect.FileDescriptor

var file_warden_warden_v1beta2_key_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x2a, 0x99, 0x01, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e,
	0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32,
	0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x4d, 0x4f, 0x53,
	0x49, 0x53, 0x10, 0x02, 0x42, 0xee, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x42, 0x08, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x3b, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0xa2, 0x02, 0x03, 0x57, 0x57, 0x58, 0xaa, 0x02, 0x15, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xca,
	0x02, 0x15, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0xe2, 0x02, 0x21, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x5c, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x57, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_warden_warden_v1beta2_key_proto_rawDescOnce sync.Once
	file_warden_warden_v1beta2_key_proto_rawDescData = file_warden_warden_v1beta2_key_proto_rawDesc
)

func file_warden_warden_v1beta2_key_proto_rawDescGZIP() []byte {
	file_warden_warden_v1beta2_key_proto_rawDescOnce.Do(func() {
		file_warden_warden_v1beta2_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_warden_warden_v1beta2_key_proto_rawDescData)
	})
	return file_warden_warden_v1beta2_key_proto_rawDescData
}

var file_warden_warden_v1beta2_key_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_warden_warden_v1beta2_key_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_warden_warden_v1beta2_key_proto_goTypes = []interface{}{
	(KeyRequestStatus)(0), // 0: warden.warden.v1beta2.KeyRequestStatus
	(KeyType)(0),          // 1: warden.warden.v1beta2.KeyType
	(AddressType)(0),      // 2: warden.warden.v1beta2.AddressType
	(*KeyRequest)(nil),    // 3: warden.warden.v1beta2.KeyRequest
	(*Key)(nil),           // 4: warden.warden.v1beta2.Key
}
var file_warden_warden_v1beta2_key_proto_depIdxs = []int32{
	1, // 0: warden.warden.v1beta2.KeyRequest.key_type:type_name -> warden.warden.v1beta2.KeyType
	0, // 1: warden.warden.v1beta2.KeyRequest.status:type_name -> warden.warden.v1beta2.KeyRequestStatus
	1, // 2: warden.warden.v1beta2.Key.type:type_name -> warden.warden.v1beta2.KeyType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_warden_warden_v1beta2_key_proto_init() }
func file_warden_warden_v1beta2_key_proto_init() {
	if File_warden_warden_v1beta2_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_warden_warden_v1beta2_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warden_warden_v1beta2_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_warden_warden_v1beta2_key_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_warden_warden_v1beta2_key_proto_goTypes,
		DependencyIndexes: file_warden_warden_v1beta2_key_proto_depIdxs,
		EnumInfos:         file_warden_warden_v1beta2_key_proto_enumTypes,
		MessageInfos:      file_warden_warden_v1beta2_key_proto_msgTypes,
	}.Build()
	File_warden_warden_v1beta2_key_proto = out.File
	file_warden_warden_v1beta2_key_proto_rawDesc = nil
	file_warden_warden_v1beta2_key_proto_goTypes = nil
	file_warden_warden_v1beta2_key_proto_depIdxs = nil
}
