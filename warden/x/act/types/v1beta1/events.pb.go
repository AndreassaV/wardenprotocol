// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/act/v1beta1/events.proto

package v1beta1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateRule is emitted on Rule creation
type EventCreateRule struct {
	// id of the new intent
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// creator is the address that created the intent
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EventCreateRule) Reset()         { *m = EventCreateRule{} }
func (m *EventCreateRule) String() string { return proto.CompactTextString(m) }
func (*EventCreateRule) ProtoMessage()    {}
func (*EventCreateRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_912b51dfb11e99b6, []int{0}
}
func (m *EventCreateRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateRule.Merge(m, src)
}
func (m *EventCreateRule) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateRule) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateRule.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateRule proto.InternalMessageInfo

func (m *EventCreateRule) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateRule) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// EventUpdateRule is emitted when Rule is updated
type EventUpdateRule struct {
	// id of updated intent
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventUpdateRule) Reset()         { *m = EventUpdateRule{} }
func (m *EventUpdateRule) String() string { return proto.CompactTextString(m) }
func (*EventUpdateRule) ProtoMessage()    {}
func (*EventUpdateRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_912b51dfb11e99b6, []int{1}
}
func (m *EventUpdateRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateRule.Merge(m, src)
}
func (m *EventUpdateRule) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateRule) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateRule.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateRule proto.InternalMessageInfo

func (m *EventUpdateRule) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// EventCreateAction is emitted when an Action is created
type EventCreateAction struct {
	// id of the new action
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// creator is the address that created the action
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EventCreateAction) Reset()         { *m = EventCreateAction{} }
func (m *EventCreateAction) String() string { return proto.CompactTextString(m) }
func (*EventCreateAction) ProtoMessage()    {}
func (*EventCreateAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_912b51dfb11e99b6, []int{2}
}
func (m *EventCreateAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateAction.Merge(m, src)
}
func (m *EventCreateAction) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateAction) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateAction.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateAction proto.InternalMessageInfo

func (m *EventCreateAction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// EventApproveAction is emitted when an Action is approved
type EventApproveAction struct {
	// id of action
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address of the account that approved the action
	Approver string `protobuf:"bytes,2,opt,name=approver,proto3" json:"approver,omitempty"`
}

func (m *EventApproveAction) Reset()         { *m = EventApproveAction{} }
func (m *EventApproveAction) String() string { return proto.CompactTextString(m) }
func (*EventApproveAction) ProtoMessage()    {}
func (*EventApproveAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_912b51dfb11e99b6, []int{3}
}
func (m *EventApproveAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApproveAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventApproveAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventApproveAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApproveAction.Merge(m, src)
}
func (m *EventApproveAction) XXX_Size() int {
	return m.Size()
}
func (m *EventApproveAction) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApproveAction.DiscardUnknown(m)
}

var xxx_messageInfo_EventApproveAction proto.InternalMessageInfo

func (m *EventApproveAction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventApproveAction) GetApprover() string {
	if m != nil {
		return m.Approver
	}
	return ""
}

// EventActionStateChange is emitted when an Action is in a new state
type EventActionStateChange struct {
	// id of action
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// previous_status is the previous status of the action
	PreviousStatus ActionStatus `protobuf:"varint,2,opt,name=previous_status,json=previousStatus,proto3,enum=warden.act.v1beta1.ActionStatus" json:"previous_status,omitempty"`
	// new_status is the new status of the action
	NewStatus ActionStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=warden.act.v1beta1.ActionStatus" json:"new_status,omitempty"`
}

func (m *EventActionStateChange) Reset()         { *m = EventActionStateChange{} }
func (m *EventActionStateChange) String() string { return proto.CompactTextString(m) }
func (*EventActionStateChange) ProtoMessage()    {}
func (*EventActionStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_912b51dfb11e99b6, []int{4}
}
func (m *EventActionStateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventActionStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventActionStateChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventActionStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventActionStateChange.Merge(m, src)
}
func (m *EventActionStateChange) XXX_Size() int {
	return m.Size()
}
func (m *EventActionStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EventActionStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_EventActionStateChange proto.InternalMessageInfo

func (m *EventActionStateChange) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventActionStateChange) GetPreviousStatus() ActionStatus {
	if m != nil {
		return m.PreviousStatus
	}
	return ActionStatus_ACTION_STATUS_UNSPECIFIED
}

func (m *EventActionStateChange) GetNewStatus() ActionStatus {
	if m != nil {
		return m.NewStatus
	}
	return ActionStatus_ACTION_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterType((*EventCreateRule)(nil), "warden.act.v1beta1.EventCreateRule")
	proto.RegisterType((*EventUpdateRule)(nil), "warden.act.v1beta1.EventUpdateRule")
	proto.RegisterType((*EventCreateAction)(nil), "warden.act.v1beta1.EventCreateAction")
	proto.RegisterType((*EventApproveAction)(nil), "warden.act.v1beta1.EventApproveAction")
	proto.RegisterType((*EventActionStateChange)(nil), "warden.act.v1beta1.EventActionStateChange")
}

func init() { proto.RegisterFile("warden/act/v1beta1/events.proto", fileDescriptor_912b51dfb11e99b6) }

var fileDescriptor_912b51dfb11e99b6 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0xde, 0x2b, 0xa0, 0x1e, 0x5a, 0x91, 0x01, 0x55, 0x1d, 0x42, 0xc9, 0xd4, 0x05,
	0x47, 0x85, 0x11, 0x21, 0x28, 0x85, 0x81, 0x35, 0x88, 0x85, 0x01, 0xe4, 0x3a, 0x47, 0x6d, 0xa4,
	0x62, 0x5b, 0xf6, 0x49, 0x0a, 0x6f, 0xc1, 0xc3, 0xf0, 0x10, 0x8c, 0x1d, 0x19, 0x51, 0xfb, 0x22,
	0xa8, 0x76, 0x03, 0x88, 0x52, 0x09, 0xb6, 0xfc, 0xca, 0xff, 0x7d, 0x47, 0xf6, 0x31, 0xdd, 0x9d,
	0x70, 0x93, 0x82, 0x8c, 0xb9, 0xc0, 0xb8, 0xe8, 0x0e, 0x00, 0x79, 0x37, 0x86, 0x02, 0x24, 0x5a,
	0xa6, 0x8d, 0x42, 0x15, 0x04, 0xbe, 0xc0, 0xb8, 0x40, 0xb6, 0x2c, 0xb4, 0x7e, 0x82, 0xb8, 0xc0,
	0x4c, 0x49, 0x0f, 0x45, 0x47, 0xb4, 0x71, 0xb1, 0x90, 0xf4, 0x0d, 0x70, 0x84, 0x24, 0x1f, 0x43,
	0x50, 0xa7, 0xd5, 0x2c, 0x6d, 0x92, 0x36, 0xe9, 0xfc, 0x4f, 0xaa, 0x59, 0x1a, 0x34, 0xe9, 0xa6,
	0x58, 0xfc, 0x55, 0xa6, 0x59, 0x6d, 0x93, 0x4e, 0x2d, 0x29, 0x63, 0xb4, 0xb7, 0x84, 0xaf, 0x75,
	0xba, 0x06, 0x8e, 0x8e, 0xe9, 0xf6, 0x17, 0x7f, 0xcf, 0x8d, 0xfe, 0xc3, 0x84, 0x53, 0x1a, 0x38,
	0xbc, 0xa7, 0xb5, 0x51, 0xc5, 0x3a, 0xbe, 0x45, 0xb7, 0xb8, 0x2f, 0x94, 0x82, 0x8f, 0x1c, 0x3d,
	0x13, 0xba, 0xe3, 0x15, 0x8e, 0xbd, 0x42, 0x8e, 0xd0, 0x1f, 0x71, 0x39, 0x5c, 0x3d, 0xe8, 0x25,
	0x6d, 0x68, 0x03, 0x45, 0xa6, 0x72, 0x7b, 0x67, 0x91, 0x63, 0x6e, 0x9d, 0xad, 0x7e, 0xd0, 0x66,
	0xab, 0x57, 0xcb, 0x3e, 0x7d, 0xb9, 0x4d, 0xea, 0x25, 0xe8, 0x73, 0x70, 0x42, 0xa9, 0x84, 0x49,
	0x69, 0xf9, 0xf7, 0x4b, 0x4b, 0x4d, 0xc2, 0xc4, 0x7f, 0x9e, 0xdd, 0xbe, 0xcc, 0x42, 0x32, 0x9d,
	0x85, 0xe4, 0x6d, 0x16, 0x92, 0xa7, 0x79, 0x58, 0x99, 0xce, 0xc3, 0xca, 0xeb, 0x3c, 0xac, 0xdc,
	0x9c, 0x0f, 0x33, 0x1c, 0xe5, 0x03, 0x26, 0xd4, 0x7d, 0xec, 0x85, 0xfb, 0x6e, 0x95, 0x42, 0x8d,
	0x97, 0xf9, 0x5b, 0x8c, 0x1f, 0xdc, 0xfa, 0xf1, 0x51, 0x83, 0x2d, 0x1f, 0xc1, 0x60, 0xc3, 0x95,
	0x0e, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x18, 0xdf, 0x8c, 0x8d, 0x56, 0x02, 0x00, 0x00,
}

func (m *EventCreateRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventApproveAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApproveAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApproveAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approver) > 0 {
		i -= len(m.Approver)
		copy(dAtA[i:], m.Approver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Approver)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventActionStateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventActionStateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventActionStateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewStatus != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.PreviousStatus != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PreviousStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	return n
}

func (m *EventCreateAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventApproveAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Approver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventActionStateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.PreviousStatus != 0 {
		n += 1 + sovEvents(uint64(m.PreviousStatus))
	}
	if m.NewStatus != 0 {
		n += 1 + sovEvents(uint64(m.NewStatus))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApproveAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApproveAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApproveAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventActionStateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventActionStateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventActionStateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			m.PreviousStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStatus |= ActionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= ActionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
